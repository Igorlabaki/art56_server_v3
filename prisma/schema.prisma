// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model RefreshToken {
  id        String    @id @default(uuid())
  expireIn  Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  session   Session[]
  createdAt DateTime  @default(now())

  @@index([userId])
  @@map("refresh_token")
}

model Session {
  id             String        @id @default(uuid())
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshTokenId String
  refreshToken   RefreshToken? @relation(fields: [refreshTokenId], references: [id], onDelete: Cascade)
  ipAddress      String?
  isValid        Boolean       @default(true)
  createdAt      DateTime      @default(now())
  expiresAt      DateTime

  @@index([userId])
  @@index([expiresAt])
  @@index([refreshTokenId])
  @@map("session")
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  username          String
  password          String
  avatarUrl         String?
  session           Session[]
  histories         History[]
  refreshToken      RefreshToken[]
  userOrganizations UserOrganization[]

  @@map("user")
}

model Organization {
  id                String             @id @default(uuid())
  name              String             @unique
  createdAt         DateTime           @default(now())
  venues            Venue[]
  owners            Owner[]
  userOrganizations UserOrganization[]

  Clause Clause[]
  Contract Contract[]

  @@map("organization")
}

model UserOrganization {
  id             String   @id @default(uuid())
  userId         String
  organizationId String
  role           Role     @default(ADMIN)
  joinedAt       DateTime @default(now())

  user         User             @relation(fields: [userId], references: [id])
  organization Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  permissions  UserPermission[]  // Permissões diretamente relacionadas ao usuário na organização

  @@unique([userId, organizationId]) // Garante que o mesmo usuário não pode ser duplicado na mesma organização
  @@index([organizationId])
  @@map("userOrganization")
}

enum Role {
  ADMIN
  USER
}

model UserPermission {
  id                 String        @id @default(uuid())
  userOrganizationId String
  permission         PermissionEnum
  venueId            String? // Pode ser nulo se for uma permissão global

  userOrganization   UserOrganization @relation(fields: [userOrganizationId], references: [id], onDelete: Cascade)
  venue              Venue?           @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@index([userOrganizationId])
  @@index([venueId])  // Permissões específicas por venue

}

enum PermissionEnum {
  VIEW_INFO
  VIEW_EVENTS
  VIEW_IMAGES
  VIEW_CALENDAR
  VIEW_ANALYSIS
  VIEW_PROPOSALS
  VIEW_NOTIFICATIONS

  EDIT_INFO
  EDIT_IMAGE
  EDIT_VENUE
  EDIT_EVENT
  EDIT_PROPOSAL
  EDIT_CALENDAR
  EDIT_ORGANIZATION
}

model Proposal {
  id                  String            @id @default(uuid())
  completeCompanyName String?
  completeClientName  String?
  cpf                 String?
  rg                  String?
  street              String?
  streetNumber        String?
  neighborhood        String?
  cep                 String?
  city                String?
  state               String?
  type                ProposalType
  trafficSource       TrafficSource
  guestNumber         Int
  knowsVenue          Boolean           @default(false)
  startDate           DateTime
  endDate             DateTime
  name                String
  email               String
  whatsapp            String
  description         String            @db.LongText
  basePrice           Float
  extraHoursQty       Int
  extraHourPrice      Float
  totalAmount         Float
  termsAccepted       Boolean           @default(false)
  approved            Boolean           @default(false)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  contact             Boolean?
  paid                Boolean?          @default(false)
  amountPaid          Float?            @default(0.0)
  venueId             String
  venue               Venue             @relation(fields: [venueId], references: [id], onDelete: Cascade)
  personList          Person[]
  histories           History[]
  payments            Payment[]
  dateEvents          DateEvent[]
  proposalCosts       ProposalCost[]
  proposalServices    ProposalService[]
  noificationList     Notification[]
  scheduleList        Schedule[]
  documents           Document[]

  @@index([venueId])
  @@index([trafficSource])
  @@index([email, startDate])
  @@index([name, startDate])
  @@map("proposal")
}

model History {
  id         String   @id @default(uuid())
  action     String
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  username   String?
  userId     String?
  proposalId String
  createdAt  DateTime @default(now())
  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([proposalId])
  @@map("history")
}

model Person {
  id         String     @id @default(uuid())
  attendance Boolean    @default(false)
  type       PersonType
  name       String
  email      String?
  rg         String?
  proposalId String
  proposal   Proposal   @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@index([proposalId])
  @@map("person")
}

enum PersonType {
  GUEST
  WORKER
}

model ProposalService {
  id         String @id @default(uuid())
  proposalId String
  serviceId  String

  joinedAt DateTime @default(now())

  service  Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  proposal Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@index([proposalId])
  @@index([serviceId])
  @@map("proposalService")
}

model Service {
  id               String            @id @default(uuid())
  name             String
  price            Float
  venueId          String
  proposalServices ProposalService[]
  venue            Venue             @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@unique([name, venueId])
  @@index([venueId])
  @@map("service")
}

enum TrafficSource {
  AIRBNB
  GOOGLE
  INSTAGRAM
  TIKTOK
  OTHER
  FRIEND
  FACEBOOK
}

enum ProposalType {
  EVENT
  OVERNIGHT
  PRODUCTION
  BARTER
  OTHER
}

model Payment {
  id            String         @id @default(uuid())
  proposalId    String
  proposal      Proposal       @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  venueId       String
  venue         Venue          @relation(fields: [venueId], references: [id], onDelete: Cascade)
  amount        Float
  paymentDate   DateTime
  paymentMethod PaymentMethod?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  imageUrl      String?

  @@index([proposalId])
  @@index([venueId])
  @@map("payment")
}

enum PaymentMethod {
  PIX
  CREDIT_CARD
}

model ProposalCost {
  id        String       @id @default(uuid())
  name      ProposalName
  teste     String
  amount    Float
  updatedAt DateTime     @updatedAt
  createdAt DateTime     @default(now())
  proposals Proposal[]

  @@map("proposalCost")
}

enum ProposalName {
  RECEPTIONIST
  SECURITY
  CLEANER
}

model Expense {
  id          String          @id @default(cuid())
  name        String
  description String? // Expense description
  amount      Float // Amount of the expense
  paymentDate DateTime? // Payment date of the expense
  type        ExpenseType // Type of expense (Fixed, Variable)
  category    ExpenseCategory // Category of expense (Maintenance, Services, Materials, etc.)
  recurring   Boolean // Indicates if it's a recurring or one-time expense
  createdAt   DateTime        @default(now()) // Record creation date
  updatedAt   DateTime        @updatedAt
  venue       Venue           @relation(fields: [venueId], references: [id]) // Allows deleting without losing the quote
  venueId     String // Can be null for expenses not linked to specific events

  @@index([venueId])
  @@map("expense")
}

enum ExpenseType {
  WEEKLY
  ANNUAL
  MONTHLY
  BIWEEKLY
  SPORADIC
}

enum ExpenseCategory {
  TAX
  INVESTMENT
  MAINTENANCE
  ADVERTISING
}

model Notification {
  id          String           @id @default(uuid())
  venueId     String
  venue       Venue            @relation(fields: [venueId], references: [id], onDelete: Cascade)
  proposalId  String?
  proposal    Proposal?        @relation(fields: [proposalId], references: [id], onDelete: Cascade) // Já está com onDelete: Cascade
  dateEventId String?
  dateEvent   DateEvent?       @relation(fields: [dateEventId], references: [id], onDelete: Cascade)
  content     String
  type        NotificationType
  createdAt   DateTime         @default(now())
  isRead      Boolean          @default(false)

  @@index([venueId])
  @@index([dateEventId])
  @@index([proposalId])
  @@map("notification")
}

enum NotificationType {
  VISIT
  EVENT
  OTHER
  BARTER
  PROPOSAL
  OVERNIGHT
  PRODUCTION
}

enum DateEventType {
  VISIT
  EVENT
  OTHER
  BARTER
  PROPOSAL
  OVERNIGHT
  PRODUCTION
}

model DateEvent {
  id            String         @id @default(cuid())
  title         String
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  proposalId    String?
  venueId       String
  venue         Venue          @relation(fields: [venueId], references: [id], onDelete: Cascade)
  proposal      Proposal?      @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  type          DateEventType
  notifications Notification[]

  @@index([proposalId])
  @@index([venueId])
  @@map("dataEvent")
}

model Venue {
  id                  String                @id @default(uuid())
  name                String                @unique
  street              String
  streetNumber        String
  complement          String?
  neighborhood        String
  city                String
  state               String
  checkIn             String?               @default("12:00")
  checkOut            String?               @default("12:00")
  cep                 String
  hasOvernightStay    Boolean
  createdAt           DateTime              @default(now())
  organization        Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId      String
  pricingModel        PricingModel // Enum que define o tipo de cobrança
  pricePerPerson      Float? // Valor por pessoa
  pricePerDay         Float? // Valor por dia
  maxGuest            Int
  texts               Text[]
  contacts            Contact[]
  images              Image[]
  expenses            Expense[]
  services            Service[]
  Payment             Payment[]
  questions           Question[]
  proposals           Proposal[]
  DateEvent           DateEvent[]
  ownerVenue          OwnerVenue[]
  notifications       Notification[]

  @@index([organizationId])
  @@map("venue")
  UserPermission UserPermission[]
}

model Contact {
  id       String @id @default(uuid())
  name     String
  role     String
  whatsapp String
  venueId  String
  venue    Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@index([venueId])
  @@map("contact")
}

model OwnerVenue {
  id       String   @id @default(uuid())
  ownerId  String
  venueId  String
  role     Role     @default(ADMIN)
  joinedAt DateTime @default(now())

  owner Owner @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  venue Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@unique([ownerId, venueId]) // Garante que o mesmo usuário não pode ser duplicado na mesma organização
  @@index([venueId])
  @@map("ownerVenue")
}

enum PricingModel {
  PER_PERSON
  PER_DAY
}

model Owner {
  id                String       @id @default(uuid())
  completeName      String
  rg                String?
  cpf               String
  pix               String
  street            String
  streetNumber      String
  complement        String?
  neighborhood      String
  city              String
  state             String
  bankName          String
  bankAgency        String
  cep               String
  createdAt         DateTime     @default(now())
  bankAccountNumber String
  ownerVenue        OwnerVenue[]
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@map("owner")
}

model Image {
  id             String    @id @default(cuid())
  imageUrl       String    @db.LongText
  description    String?
  position       Int
  createdAt      DateTime? @default(now()) // "created_at" para "createdAt"
  updatedAt      DateTime? @updatedAt
  responsiveMode String?
  tag            String?
  venueId        String
  venue          Venue     @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@index([venueId])
  @@map("image")
}

model Text {
  id        String   @id @default(cuid())
  area      String // "area" permanece o mesmo
  title     String? // "titulo" para "title"
  position  Int      @default(0)
  text      String   @db.LongText
  createdAt DateTime @default(now()) // "created_at" para "createdAt"
  updatedAt DateTime @updatedAt
  venueId   String
  venue     Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@index([venueId])
  @@map("text")
}

model Document {
  id         String   @id @default(cuid())
  imageUrl   String // "area" permanece o mesmo
  title      String // "titulo" para "title"
  createdAt  DateTime @default(now()) // "created_at" para "createdAt"
  updatedAt  DateTime @updatedAt
  proposalId String
  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@index([proposalId])
  @@map("document")
}

model Question {
  id        String   @id @default(cuid())
  question  String   @db.LongText
  response  String   @db.LongText
  createdAt DateTime @default(now()) // "created_at" para "createdAt"
  updatedAt DateTime @updatedAt
  venueId   String
  venue     Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@index([venueId])
  @@map("question")
}

model Contract {
  id             String       @id @default(cuid())
  name           String
  title          String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  clauses        Clause[]

  @@index([organizationId])
  @@map("contract")
}

model Clause {
  id             String        @id @default(cuid())
  text           String        @db.LongText
  title          String        @db.LongText
  position       Int?
  createdAt      DateTime      @default(now()) // "created_at" para "createdAt"
  updatedAt      DateTime      @updatedAt
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  contractId     String?
  Contract       Contract?     @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@index([contractId])
  @@index([organizationId])
  @@map("clause")
}

model Schedule {
  id           String   @id @default(cuid())
  name         String
  workerNumber Int
  description  String?  @db.LongText
  startHour    DateTime
  endHour      DateTime
  createdAt    DateTime @default(now()) // "created_at" para "createdAt"
  updatedAt    DateTime @updatedAt

  proposalId String
  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@index([proposalId])
  @@map("schedule")
}
