generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model RefreshToken {
  id        String    @id @default(uuid())
  expireIn  Int
  userId    String
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  session   Session[]

  @@index([userId])
  @@map("refresh_token")
}

model Session {
  id             String        @id @default(uuid())
  userId         String
  refreshTokenId String
  ipAddress      String?
  isValid        Boolean       @default(true)
  createdAt      DateTime      @default(now())
  expiresAt      DateTime
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshToken   RefreshToken? @relation(fields: [refreshTokenId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([refreshTokenId])
  @@map("session")
}

model User {
  id                       String             @id @default(uuid())
  email                    String             @unique
  username                 String
  password                 String
  avatarUrl                String?
  googleId                 String?            @unique
  fcmToken                 String?
  passwordResetToken       String?
  passwordResetExpires     DateTime?
  emailConfirmationToken   String?
  emailConfirmationExpires DateTime?
  emailConfirmed           Boolean            @default(false)
  session                  Session[]
  histories                History[]
  refreshToken             RefreshToken[]
  userOrganizations        UserOrganization[]

  @@map("user")
}

model Organization {
  id                String             @id @default(uuid())
  name              String             @unique
  createdAt         DateTime           @default(now())
  whatsappNumber    String?
  tiktokUrl         String?
  instagramUrl      String?
  email             String?            @unique
  url               String?
  facebookUrl       String?
  logoUrl           String?
  images            Image[]
  texts             Text[]
  venues            Venue[]
  owners            Owner[]
  userOrganizations UserOrganization[]
  Clause            Clause[]
  Contract          Contract[]
  attachments       Attachment[]

  @@map("organization")
}

model UserOrganization {
  id              String           @id @default(uuid())
  userId          String
  organizationId  String
  joinedAt        DateTime         @default(now())
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userPermissions UserPermission[]

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@map("userOrganization")
}

model UserPermission {
  id                 String           @id @default(uuid())
  userOrganizationId String
  permissions        String           @db.LongText
  venueId            String?
  role               String           @default("ADMIN")
  userOrganization   UserOrganization @relation(fields: [userOrganizationId], references: [id], onDelete: Cascade)
  venue              Venue?           @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@unique([userOrganizationId, venueId])
  @@index([userOrganizationId])
  @@index([venueId])
}

model Proposal {
  id                  String            @id @default(uuid())
  completeCompanyName String?
  completeClientName  String
  cpf                 String?
  cnpj                String?
  rg                  String?
  street              String?
  streetNumber        String?
  neighborhood        String?
  cep                 String?
  city                String?
  state               String?
  type                ProposalType
  trafficSource       TrafficSource
  guestNumber         Int
  knowsVenue          Boolean           @default(false)
  startDate           DateTime
  endDate             DateTime
  email               String
  whatsapp            String
  description         String            @db.LongText
  hostMessage         String?           @db.LongText
  basePrice           Float
  extraHoursQty       Int
  extraHourPrice      Float
  totalAmount         Float
  termsAccepted       Boolean           @default(false)
  approved            Boolean           @default(false)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  contact             Boolean?
  paid                Boolean?          @default(false)
  amountPaid          Float?            @default(0)
  venueId             String
  venue               Venue             @relation(fields: [venueId], references: [id], onDelete: Cascade)
  personList          Person[]
  histories           History[]
  payments            Payment[]
  dateEvents          DateEvent[]
  proposalCosts       ProposalCost[]
  proposalServices    ProposalService[]
  noificationList     Notification[]
  scheduleList        Schedule[]
  documents           Document[]

  @@index([venueId])
  @@index([trafficSource])
  @@index([email, startDate])
  @@index([completeClientName, startDate])
  @@map("proposal")
}

model History {
  id         String   @id @default(uuid())
  action     String
  username   String?
  userId     String?
  proposalId String
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([proposalId])
  @@map("history")
}

model Person {
  id                     String     @id @default(uuid())
  attendance             Boolean    @default(false)
  type                   PersonType
  name                   String
  email                  String?
  rg                     String?
  confirmAttendanceEmail Boolean    @default(false)
  proposalId             String
  proposal               Proposal   @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@index([proposalId])
  @@map("person")
}

model ProposalService {
  id         String   @id @default(uuid())
  proposalId String
  serviceId  String
  teste      String?
  joinedAt   DateTime @default(now())
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@index([proposalId])
  @@index([serviceId])
  @@map("proposalService")
}

model Service {
  id               String            @id @default(uuid())
  name             String
  price            Float
  venueId          String
  proposalServices ProposalService[]
  venue            Venue             @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@unique([name, venueId])
  @@index([venueId])
  @@map("service")
}

model Payment {
  id            String         @id @default(uuid())
  proposalId    String
  venueId       String
  amount        Float
  paymentDate   DateTime
  paymentMethod PaymentMethod?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  imageUrl      String?
  proposal      Proposal       @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  venue         Venue          @relation(fields: [venueId], references: [id], onDelete: Cascade)
  Document      Document[]

  @@index([proposalId])
  @@index([venueId])
  @@map("payment")
}

model ProposalCost {
  id        String       @id @default(uuid())
  name      ProposalName
  teste     String
  amount    Float
  updatedAt DateTime     @updatedAt
  createdAt DateTime     @default(now())
  proposals Proposal[]

  @@map("proposalCost")
}

model Expense {
  id          String          @id @default(cuid())
  name        String
  description String?
  amount      Float
  paymentDate DateTime?
  type        ExpenseType
  category    ExpenseCategory
  recurring   Boolean
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  venueId     String
  venue       Venue           @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@index([venueId])
  @@map("expense")
}

model Notification {
  id          String           @id @default(uuid())
  venueId     String
  proposalId  String?
  dateEventId String?
  content     String
  type        NotificationType
  createdAt   DateTime         @default(now())
  isRead      Boolean          @default(false)
  venue       Venue            @relation(fields: [venueId], references: [id], onDelete: Cascade)
  proposal    Proposal?        @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  dateEvent   DateEvent?       @relation(fields: [dateEventId], references: [id], onDelete: Cascade)

  @@index([venueId])
  @@index([dateEventId])
  @@index([proposalId])
  @@map("notification")
}

model DateEvent {
  id            String         @id @default(cuid())
  title         String
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  proposalId    String?
  venueId       String
  type          DateEventType
  venue         Venue          @relation(fields: [venueId], references: [id], onDelete: Cascade)
  proposal      Proposal?      @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([proposalId])
  @@index([venueId])
  @@map("dataEvent")
}

model Venue {
  id                   String           @id @default(uuid())
  name                 String           @unique
  description          String?          @db.LongText
  email                String?          @unique
  url                  String?
  facebookUrl          String?
  isShowOnOrganization Boolean?         @default(false)
  logoUrl              String?
  minimumPrice         Float?           @default(0)
  whatsappNumber       String?
  tiktokUrl            String?
  instagramUrl         String?
  street               String
  streetNumber         String
  complement           String?
  neighborhood         String
  city                 String
  state                String
  checkIn              String?          @default("12:00")
  checkOut             String?          @default("12:00")
  cep                  String
  hasOvernightStay     Boolean
  minimumNights        Int?             @default(1)
  createdAt            DateTime         @default(now())
  organizationId       String
  pricingModel         PricingModel
  pricePerPerson       Float?
  pricePerDay          Float?
  pricePerPersonDay    Float?
  pricePerPersonHour   Float?
  maxGuest             Int
  organization         Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  texts                Text[]
  contacts             Contact[]
  images               Image[]
  expenses             Expense[]
  services             Service[]
  Payment              Payment[]
  questions            Question[]
  proposals            Proposal[]
  DateEvent            DateEvent[]
  ownerVenue           OwnerVenue[]
  notifications        Notification[]
  UserPermission       UserPermission[]
  seasonalFee          SeasonalFee[]
  contracts            Contract[]       @relation("ContractVenues")
  attachments          Attachment[]
  goals                Goal[]
  EmailConfig          EmailConfig[]

  @@index([organizationId])
  @@map("venue")
}

model Goal {
  id              String   @id @default(uuid())
  minValue        Float
  maxValue        Float?
  increasePercent Float
  months          String
  venueId         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  venue           Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@index([venueId])
}

model SeasonalFee {
  id           String          @id @default(uuid())
  type         SeasonalFeeType
  title        String
  startDay     String?
  endDay       String?
  fee          Int
  venueId      String
  affectedDays String?
  venue        Venue           @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@index([venueId])
}

model Contact {
  id       String       @id @default(uuid())
  name     String
  role     String
  whatsapp String
  venueId  String
  venue    Venue        @relation(fields: [venueId], references: [id], onDelete: Cascade)
  email    String?
  type     ContactType? @default(TEAM_MEMBER)

  @@index([venueId])
  @@map("contact")
}

enum ContactType {
  TEAM_MEMBER // Membro da equipe
  SUPPLIER // Fornecedor
}

model OwnerVenue {
  id       String   @id @default(uuid())
  ownerId  String
  venueId  String
  role     String   @default("ADMIN")
  joinedAt DateTime @default(now())
  owner    Owner    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  venue    Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@unique([ownerId, venueId], name: "ownerId_venueId")
  @@index([venueId])
  @@map("ownerVenue")
}

model Owner {
  id                String       @id @default(uuid())
  completeName      String
  rg                String?
  cpf               String
  pix               String
  street            String
  streetNumber      String
  complement        String?
  neighborhood      String
  city              String
  state             String
  bankName          String
  bankAgency        String
  cep               String
  createdAt         DateTime     @default(now())
  bankAccountNumber String
  organizationId    String
  ownerVenue        OwnerVenue[]
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@map("owner")
}

model Image {
  id                   String        @id @default(cuid())
  imageUrl             String        @db.LongText
  group                String?
  description          String?
  position             Int
  createdAt            DateTime?     @default(now())
  updatedAt            DateTime?     @updatedAt
  responsiveMode       String?
  tag                  String?
  isShowOnOrganization Boolean?      @default(false)
  venueId              String? // Tornando opcional
  organizationId       String? // Novo campo opcional
  venue                Venue?        @relation(fields: [venueId], references: [id], onDelete: Cascade)
  organization         Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([venueId])
  @@index([organizationId])
  @@map("image")
}

model Text {
  id             String        @id @default(cuid())
  area           String
  title          String?
  position       Int           @default(0)
  text           String        @db.LongText
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  venueId        String? // Tornando opcional
  organizationId String? // Novo campo opcional
  venue          Venue?        @relation(fields: [venueId], references: [id], onDelete: Cascade)
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([venueId])
  @@index([organizationId])
  @@map("text")
}

model Document {
  id           String       @id @default(cuid())
  imageUrl     String
  title        String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  thumbnailUrl String?
  fileType     DocumentType
  proposalId   String
  paymentId    String?
  proposal     Proposal     @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  payment      Payment?     @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@index([paymentId])
  @@index([proposalId])
  @@map("document")
}

model Question {
  id        String   @id @default(cuid())
  question  String   @db.LongText
  response  String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  venueId   String
  venue     Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@index([venueId])
  @@map("question")
}

model Contract {
  id             String       @id @default(cuid())
  name           String
  title          String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  venues         Venue[]      @relation("ContractVenues")
  clauses        Clause[]     @relation("ContractClauses")

  @@index([organizationId])
  @@map("contract")
}

model Clause {
  id             String        @id @default(cuid())
  text           String        @db.LongText
  title          String        @db.LongText
  position       Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  contracts      Contract[]    @relation("ContractClauses")

  @@index([organizationId])
  @@map("clause")
}

model Attachment {
  id             String        @id @default(cuid())
  text           String        @db.LongText
  title          String        @db.LongText
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organizationId String?
  venueId        String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  venue          Venue?        @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([venueId])
  @@map("attachments")
}

model EmailConfig {
  id                 String  @id @default(cuid())
  backgroundImageUrl String?
  title              String?
  type               String
  message            String? @db.LongText
  venueId            String
  venue              Venue   @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@index([venueId])
  @@map("emailConfig")
}

model Schedule {
  id           String   @id @default(cuid())
  name         String
  workerNumber Int
  description  String?  @db.LongText
  startHour    DateTime
  endHour      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  proposalId   String
  proposal     Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@index([proposalId])
  @@map("schedule")
}

model ContractClauses {
  A String
  B String

  @@unique([A, B], map: "_ContractClauses_AB_unique")
  @@index([B], map: "_ContractClauses_B_index")
  @@map("_ContractClauses")
}

model ContractVenues {
  A String
  B String

  @@unique([A, B], map: "_ContractVenues_AB_unique")
  @@index([B], map: "_ContractVenues_B_index")
  @@map("_ContractVenues")
}

model ProposalToProposalCost {
  A String
  B String

  @@unique([A, B], map: "_ProposalToProposalCost_AB_unique")
  @@index([B], map: "_ProposalToProposalCost_B_index")
  @@map("_ProposalToProposalCost")
}

enum PersonType {
  GUEST
  WORKER
}

enum TrafficSource {
  AIRBNB
  GOOGLE
  INSTAGRAM
  TIKTOK
  OTHER
  FRIEND
  FACEBOOK
}

enum ProposalType {
  EVENT
  OVERNIGHT
  PRODUCTION
  BARTER
  OTHER
}

enum PaymentMethod {
  PIX
  CREDIT_CARD
}

enum ProposalName {
  RECEPTIONIST
  SECURITY
  CLEANER
}

enum ExpenseType {
  WEEKLY
  ANNUAL
  MONTHLY
  BIWEEKLY
  SPORADIC
}

enum ExpenseCategory {
  TAX
  INVESTMENT
  MAINTENANCE
  ADVERTISING
}

enum NotificationType {
  VISIT
  EVENT
  OTHER
  BARTER
  PROPOSAL
  OVERNIGHT
  PRODUCTION
}

enum DateEventType {
  VISIT
  EVENT
  OTHER
  BARTER
  PROPOSAL
  OVERNIGHT
  PRODUCTION
}

enum SeasonalFeeType {
  SURCHARGE
  DISCOUNT
}

enum PricingModel {
  PER_PERSON
  PER_DAY
  PER_PERSON_DAY
  PER_PERSON_HOUR
}

enum DocumentType {
  PDF
  IMAGE
}
