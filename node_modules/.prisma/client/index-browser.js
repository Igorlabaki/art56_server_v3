
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  expireIn: 'expireIn',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  refreshTokenId: 'refreshTokenId',
  ipAddress: 'ipAddress',
  isValid: 'isValid',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  password: 'password',
  avatarUrl: 'avatarUrl',
  googleId: 'googleId',
  fcmToken: 'fcmToken',
  passwordResetToken: 'passwordResetToken',
  passwordResetExpires: 'passwordResetExpires',
  emailConfirmationToken: 'emailConfirmationToken',
  emailConfirmationExpires: 'emailConfirmationExpires',
  emailConfirmed: 'emailConfirmed'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt'
};

exports.Prisma.UserOrganizationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  organizationId: 'organizationId',
  joinedAt: 'joinedAt'
};

exports.Prisma.UserPermissionScalarFieldEnum = {
  id: 'id',
  userOrganizationId: 'userOrganizationId',
  permissions: 'permissions',
  venueId: 'venueId',
  role: 'role'
};

exports.Prisma.ProposalScalarFieldEnum = {
  id: 'id',
  completeCompanyName: 'completeCompanyName',
  completeClientName: 'completeClientName',
  cpf: 'cpf',
  cnpj: 'cnpj',
  rg: 'rg',
  street: 'street',
  streetNumber: 'streetNumber',
  neighborhood: 'neighborhood',
  cep: 'cep',
  city: 'city',
  state: 'state',
  type: 'type',
  trafficSource: 'trafficSource',
  guestNumber: 'guestNumber',
  knowsVenue: 'knowsVenue',
  startDate: 'startDate',
  endDate: 'endDate',
  email: 'email',
  whatsapp: 'whatsapp',
  description: 'description',
  hostMessage: 'hostMessage',
  basePrice: 'basePrice',
  extraHoursQty: 'extraHoursQty',
  extraHourPrice: 'extraHourPrice',
  totalAmount: 'totalAmount',
  termsAccepted: 'termsAccepted',
  approved: 'approved',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  contact: 'contact',
  paid: 'paid',
  amountPaid: 'amountPaid',
  venueId: 'venueId'
};

exports.Prisma.HistoryScalarFieldEnum = {
  id: 'id',
  action: 'action',
  username: 'username',
  userId: 'userId',
  proposalId: 'proposalId',
  createdAt: 'createdAt'
};

exports.Prisma.PersonScalarFieldEnum = {
  id: 'id',
  attendance: 'attendance',
  type: 'type',
  name: 'name',
  email: 'email',
  rg: 'rg',
  confirmAttendanceEmail: 'confirmAttendanceEmail',
  proposalId: 'proposalId'
};

exports.Prisma.ProposalServiceScalarFieldEnum = {
  id: 'id',
  proposalId: 'proposalId',
  serviceId: 'serviceId',
  teste: 'teste',
  joinedAt: 'joinedAt'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  price: 'price',
  venueId: 'venueId'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  proposalId: 'proposalId',
  venueId: 'venueId',
  amount: 'amount',
  paymentDate: 'paymentDate',
  paymentMethod: 'paymentMethod',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  imageUrl: 'imageUrl'
};

exports.Prisma.ProposalCostScalarFieldEnum = {
  id: 'id',
  name: 'name',
  teste: 'teste',
  amount: 'amount',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.ExpenseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  amount: 'amount',
  paymentDate: 'paymentDate',
  type: 'type',
  category: 'category',
  recurring: 'recurring',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  venueId: 'venueId'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  venueId: 'venueId',
  proposalId: 'proposalId',
  dateEventId: 'dateEventId',
  content: 'content',
  type: 'type',
  createdAt: 'createdAt',
  isRead: 'isRead'
};

exports.Prisma.DateEventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  proposalId: 'proposalId',
  venueId: 'venueId',
  type: 'type'
};

exports.Prisma.VenueScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  url: 'url',
  facebookUrl: 'facebookUrl',
  logoUrl: 'logoUrl',
  minimumPrice: 'minimumPrice',
  whatsappNumber: 'whatsappNumber',
  tiktokUrl: 'tiktokUrl',
  instagramUrl: 'instagramUrl',
  street: 'street',
  streetNumber: 'streetNumber',
  complement: 'complement',
  neighborhood: 'neighborhood',
  city: 'city',
  state: 'state',
  checkIn: 'checkIn',
  checkOut: 'checkOut',
  cep: 'cep',
  hasOvernightStay: 'hasOvernightStay',
  minimumNights: 'minimumNights',
  createdAt: 'createdAt',
  organizationId: 'organizationId',
  pricingModel: 'pricingModel',
  pricePerPerson: 'pricePerPerson',
  pricePerDay: 'pricePerDay',
  pricePerPersonDay: 'pricePerPersonDay',
  pricePerPersonHour: 'pricePerPersonHour',
  maxGuest: 'maxGuest'
};

exports.Prisma.GoalScalarFieldEnum = {
  id: 'id',
  minValue: 'minValue',
  maxValue: 'maxValue',
  increasePercent: 'increasePercent',
  months: 'months',
  venueId: 'venueId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SeasonalFeeScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  startDay: 'startDay',
  endDay: 'endDay',
  fee: 'fee',
  venueId: 'venueId',
  affectedDays: 'affectedDays'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  name: 'name',
  role: 'role',
  whatsapp: 'whatsapp',
  venueId: 'venueId',
  email: 'email',
  type: 'type'
};

exports.Prisma.OwnerVenueScalarFieldEnum = {
  id: 'id',
  ownerId: 'ownerId',
  venueId: 'venueId',
  role: 'role',
  joinedAt: 'joinedAt'
};

exports.Prisma.OwnerScalarFieldEnum = {
  id: 'id',
  completeName: 'completeName',
  rg: 'rg',
  cpf: 'cpf',
  pix: 'pix',
  street: 'street',
  streetNumber: 'streetNumber',
  complement: 'complement',
  neighborhood: 'neighborhood',
  city: 'city',
  state: 'state',
  bankName: 'bankName',
  bankAgency: 'bankAgency',
  cep: 'cep',
  createdAt: 'createdAt',
  bankAccountNumber: 'bankAccountNumber',
  organizationId: 'organizationId'
};

exports.Prisma.ImageScalarFieldEnum = {
  id: 'id',
  imageUrl: 'imageUrl',
  description: 'description',
  position: 'position',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  responsiveMode: 'responsiveMode',
  tag: 'tag',
  venueId: 'venueId'
};

exports.Prisma.TextScalarFieldEnum = {
  id: 'id',
  area: 'area',
  title: 'title',
  position: 'position',
  text: 'text',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  venueId: 'venueId'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  imageUrl: 'imageUrl',
  title: 'title',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  thumbnailUrl: 'thumbnailUrl',
  fileType: 'fileType',
  proposalId: 'proposalId',
  paymentId: 'paymentId'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  question: 'question',
  response: 'response',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  venueId: 'venueId'
};

exports.Prisma.ContractScalarFieldEnum = {
  id: 'id',
  name: 'name',
  title: 'title',
  organizationId: 'organizationId'
};

exports.Prisma.ClauseScalarFieldEnum = {
  id: 'id',
  text: 'text',
  title: 'title',
  position: 'position',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId'
};

exports.Prisma.AttachmentScalarFieldEnum = {
  id: 'id',
  text: 'text',
  title: 'title',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  venueId: 'venueId'
};

exports.Prisma.EmailConfigScalarFieldEnum = {
  id: 'id',
  backgroundImageUrl: 'backgroundImageUrl',
  title: 'title',
  type: 'type',
  message: 'message',
  venueId: 'venueId'
};

exports.Prisma.ScheduleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  workerNumber: 'workerNumber',
  description: 'description',
  startHour: 'startHour',
  endHour: 'endHour',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  proposalId: 'proposalId'
};

exports.Prisma.ContractClausesScalarFieldEnum = {
  A: 'A',
  B: 'B'
};

exports.Prisma.ContractVenuesScalarFieldEnum = {
  A: 'A',
  B: 'B'
};

exports.Prisma.ProposalToProposalCostScalarFieldEnum = {
  A: 'A',
  B: 'B'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ProposalType = exports.$Enums.ProposalType = {
  EVENT: 'EVENT',
  OVERNIGHT: 'OVERNIGHT',
  PRODUCTION: 'PRODUCTION',
  BARTER: 'BARTER',
  OTHER: 'OTHER'
};

exports.TrafficSource = exports.$Enums.TrafficSource = {
  AIRBNB: 'AIRBNB',
  GOOGLE: 'GOOGLE',
  INSTAGRAM: 'INSTAGRAM',
  TIKTOK: 'TIKTOK',
  OTHER: 'OTHER',
  FRIEND: 'FRIEND',
  FACEBOOK: 'FACEBOOK'
};

exports.PersonType = exports.$Enums.PersonType = {
  GUEST: 'GUEST',
  WORKER: 'WORKER'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  PIX: 'PIX',
  CREDIT_CARD: 'CREDIT_CARD'
};

exports.ProposalName = exports.$Enums.ProposalName = {
  RECEPTIONIST: 'RECEPTIONIST',
  SECURITY: 'SECURITY',
  CLEANER: 'CLEANER'
};

exports.ExpenseType = exports.$Enums.ExpenseType = {
  WEEKLY: 'WEEKLY',
  ANNUAL: 'ANNUAL',
  MONTHLY: 'MONTHLY',
  BIWEEKLY: 'BIWEEKLY',
  SPORADIC: 'SPORADIC'
};

exports.ExpenseCategory = exports.$Enums.ExpenseCategory = {
  TAX: 'TAX',
  INVESTMENT: 'INVESTMENT',
  MAINTENANCE: 'MAINTENANCE',
  ADVERTISING: 'ADVERTISING'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  VISIT: 'VISIT',
  EVENT: 'EVENT',
  OTHER: 'OTHER',
  BARTER: 'BARTER',
  PROPOSAL: 'PROPOSAL',
  OVERNIGHT: 'OVERNIGHT',
  PRODUCTION: 'PRODUCTION'
};

exports.DateEventType = exports.$Enums.DateEventType = {
  VISIT: 'VISIT',
  EVENT: 'EVENT',
  OTHER: 'OTHER',
  BARTER: 'BARTER',
  PROPOSAL: 'PROPOSAL',
  OVERNIGHT: 'OVERNIGHT',
  PRODUCTION: 'PRODUCTION'
};

exports.PricingModel = exports.$Enums.PricingModel = {
  PER_PERSON: 'PER_PERSON',
  PER_DAY: 'PER_DAY',
  PER_PERSON_DAY: 'PER_PERSON_DAY',
  PER_PERSON_HOUR: 'PER_PERSON_HOUR'
};

exports.SeasonalFeeType = exports.$Enums.SeasonalFeeType = {
  SURCHARGE: 'SURCHARGE',
  DISCOUNT: 'DISCOUNT'
};

exports.ContactType = exports.$Enums.ContactType = {
  TEAM_MEMBER: 'TEAM_MEMBER',
  SUPPLIER: 'SUPPLIER'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  PDF: 'PDF',
  IMAGE: 'IMAGE'
};

exports.Prisma.ModelName = {
  RefreshToken: 'RefreshToken',
  Session: 'Session',
  User: 'User',
  Organization: 'Organization',
  UserOrganization: 'UserOrganization',
  UserPermission: 'UserPermission',
  Proposal: 'Proposal',
  History: 'History',
  Person: 'Person',
  ProposalService: 'ProposalService',
  Service: 'Service',
  Payment: 'Payment',
  ProposalCost: 'ProposalCost',
  Expense: 'Expense',
  Notification: 'Notification',
  DateEvent: 'DateEvent',
  Venue: 'Venue',
  Goal: 'Goal',
  SeasonalFee: 'SeasonalFee',
  Contact: 'Contact',
  OwnerVenue: 'OwnerVenue',
  Owner: 'Owner',
  Image: 'Image',
  Text: 'Text',
  Document: 'Document',
  Question: 'Question',
  Contract: 'Contract',
  Clause: 'Clause',
  Attachment: 'Attachment',
  EmailConfig: 'EmailConfig',
  Schedule: 'Schedule',
  ContractClauses: 'ContractClauses',
  ContractVenues: 'ContractVenues',
  ProposalToProposalCost: 'ProposalToProposalCost'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
